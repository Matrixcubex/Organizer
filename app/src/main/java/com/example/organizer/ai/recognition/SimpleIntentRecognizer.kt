package com.example.organizer.ai.recognition

import android.util.Log
import com.example.organizer.ai.models.ParsedCommand
import com.example.organizer.ai.models.UserIntention

class SimpleIntentRecognizer {

    fun recognizeIntent(userInput: String): ParsedCommand {
        val lowerInput = userInput.lowercase()

        Log.d("INTENT_DEBUG", "üîÑ Analizando input: '$userInput'")

        val result = when {
            // AGENDA - M√∫ltiples patrones
            containsAny(lowerInput, listOf("ubicaci√≥n", "ubicacion", "d√≥nde", "donde", "mapa", "c√≥mo llegar", "como llegar", "direcci√≥n", "direccion", "lugar", "sitio")) -> {
                val destino = extractDestination(userInput)
                Log.d("INTENT_DEBUG", "‚úÖ Detectado: UBICACI√ìN - Destino: '$destino'")
                ParsedCommand(
                    intention = UserIntention.Ubicacion,
                    confidence = 0.8f,
                    parameters = mapOf(
                        "direccion" to destino,
                        "tipo" to "navegacion"
                    ),
                    rawText = userInput
                )
            }


            // RECORDATORIO - M√∫ltiples patrones
            containsAny(lowerInput, listOf("recordatorio", "recordar", "aviso", "notificaci√≥n", "alarma", "recordarme", "avisarme")) -> {
                Log.d("INTENT_DEBUG", "‚úÖ Detectado: RECORDATORIO")
                ParsedCommand(
                    intention = UserIntention.Recordatorio,
                    confidence = 0.9f,
                    parameters = mapOf(
                        "mensaje" to userInput,
                        "tipo" to "recordatorio"
                    ),
                    rawText = userInput
                )
            }

            // UBICACI√ìN
            containsAny(lowerInput, listOf("ubicaci√≥n", "ubicacion", "d√≥nde", "donde", "mapa", "c√≥mo llegar", "como llegar", "direcci√≥n", "direccion", "lugar", "sitio")) -> {
                Log.d("INTENT_DEBUG", "‚úÖ Detectado: UBICACI√ìN")
                ParsedCommand(
                    intention = UserIntention.Ubicacion,
                    confidence = 0.8f,
                    parameters = mapOf("direccion" to userInput),
                    rawText = userInput
                )
            }

            // B√öSQUEDA
            containsAny(lowerInput, listOf("buscar", "encontrar", "informaci√≥n", "informacion", "qu√© es", "que es", "qui√©n es", "quien es", "muestra", "ense√±a", "dime sobre")) -> {
                Log.d("INTENT_DEBUG", "‚úÖ Detectado: B√öSQUEDA")
                ParsedCommand(
                    intention = UserIntention.Busqueda,
                    confidence = 0.8f,
                    parameters = mapOf("query" to userInput),
                    rawText = userInput
                )
            }

            // EMERGENCIA espec√≠fica (debe ir ANTES de contacto normal)
            containsAny(lowerInput, listOf("emergencia", "ayuda", "socorro", "urgencia", "accidente", "911", "peligro", "auxilio")) -> {
                Log.d("INTENT_DEBUG", "‚úÖ Detectado: EMERGENCIA")
                ParsedCommand(
                    intention = UserIntention.Contacto,
                    confidence = 0.95f,
                    parameters = mapOf(
                        "emergencia" to "true",
                        "contacto" to "emergencia",
                        "tipo" to "emergencia"
                    ),
                    rawText = userInput
                )
            }

            // CONTACTO normal
            containsAny(lowerInput, listOf("llamar", "contactar", "tel√©fono", "telefono", "n√∫mero", "numero", "marcar", "hablar con")) -> {
                val contacto = extractContactName(userInput)
                Log.d("INTENT_DEBUG", "‚úÖ Detectado: CONTACTO - Nombre: '$contacto'")
                ParsedCommand(
                    intention = UserIntention.Contacto,
                    confidence = 0.8f,
                    parameters = mapOf(
                        "contacto" to contacto,
                        "tipo" to "contacto_normal",
                        "nombre" to contacto
                    ),
                    rawText = userInput
                )
            }

            // CHAT GENERAL (fallback)
            else -> {
                Log.d("INTENT_DEBUG", "‚ùì No detectado - Usando CHAT GENERAL")
                ParsedCommand(
                    intention = UserIntention.ChatGeneral,
                    confidence = 0.7f,
                    rawText = userInput
                )
            }
        }

        Log.d("INTENT_DEBUG", "üéØ Resultado final: ${result.intention}")
        return result
    }

    private fun containsAny(input: String, keywords: List<String>): Boolean {
        keywords.forEach { keyword ->
            if (input.contains(keyword, ignoreCase = true)) {
                Log.d("INTENT_DEBUG", "   üìç Keyword encontrada: '$keyword'")
                return true
            }
        }
        return false
    }
    // En SimpleIntentRecognizer.kt - A√ëADIR estos m√©todos:

    private fun extractDestination(input: String): String {
        val patterns = listOf(
            "ir a (.+)".toRegex(),
            "c√≥mo llegar a (.+)".toRegex(),
            "como llegar a (.+)".toRegex(),
            "mapa de (.+)".toRegex(),
            "direcci√≥n a (.+)".toRegex(),
            "direccion a (.+)".toRegex()
        )

        patterns.forEach { pattern ->
            val match = pattern.find(input.lowercase())
            if (match != null) {
                return match.groupValues[1].trim()
            }
        }

        // Si no encuentra patr√≥n, usar palabras despu√©s de "mapa" o "ubicaci√≥n"
        val words = input.split(" ")
        val locationKeywords = listOf("mapa", "ubicaci√≥n", "ubicacion", "d√≥nde", "donde")

        val keywordIndex = words.indexOfFirst { it.lowercase() in locationKeywords }
        if (keywordIndex != -1 && keywordIndex < words.size - 1) {
            return words.subList(keywordIndex + 1, words.size).joinToString(" ")
        }

        return input // Fallback: usar todo el input
    }

    private fun extractContactName(input: String): String {
        val patterns = listOf(
            "llamar a (.+)".toRegex(),
            "contactar a (.+)".toRegex(),
            "hablar con (.+)".toRegex(),
            "marcar a (.+)".toRegex()
        )

        patterns.forEach { pattern ->
            val match = pattern.find(input.lowercase())
            if (match != null) {
                return match.groupValues[1].trim()
            }
        }

        // Buscar nombre despu√©s de palabras clave
        val contactKeywords = listOf("llamar", "contactar", "hablar", "marcar")
        val words = input.split(" ")
        val keywordIndex = words.indexOfFirst { it.lowercase() in contactKeywords }

        if (keywordIndex != -1 && keywordIndex < words.size - 1) {
            return words.subList(keywordIndex + 1, words.size).joinToString(" ")
        }

        return "" // No se detect√≥ nombre espec√≠fico
    }
}